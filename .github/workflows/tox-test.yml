name: Tox test

on: [pull_request, push]

env:
  # Make sure pip caches dependencies and installs as user
  PIP_NO_CACHE_DIR: false
  PIP_USER: 1

  # Make sure poetry won't use virtual environments
  POETRY_VIRTUALENVS_CREATE: false

jobs:
  tox-test:
    runs-on: ${{ matrix.platform }}

    strategy:
      matrix:
        platform: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ["3.7", "3.8", "3.9", "3.10"]
        include:
            # Specify paths here, so we know what to cache
          - platform: windows-latest
            POETRY_CACHE_DIR_SUF: \.cache\py-user-base
            PYTHONUSERBASE_SUF: \.cache\py-user-base
            TOXDIR_SUF: \.tox
          - platform: ubuntu-latest
            POETRY_CACHE_DIR_SUF: /.cache/py-user-base
            PYTHONUSERBASE_SUF: /.cache/py-user-base
            TOXDIR_SUF: /.tox
          - platform: macos-latest
            POETRY_CACHE_DIR_SUF: /.cache/py-user-base
            PYTHONUSERBASE_SUF: /.cache/py-user-base
            TOXDIR_SUF: /.tox

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Python setup
        id: python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
        env:
          PYTHONUSERBASE: ${{ github.workspace }}${{ matrix.PYTHONUSERBASE_SUF }}

      # Cache python dependencies so that unless we change them,
      # we won't need to reinstall them with each workflow run.
      # The key is a composite of multiple values, which when changed
      # the cache won't be restored in order to make updating possible
      - name: Python dependency caching
        uses: actions/cache@v2
        id: python_cache
        with:
          path: |
            ${{ env.PYTHONUSERBASE }}
            ${{ env.TOXDIR }}
          key: "python-0-${{ runner.os }}-${{ env.PYTHONUSERBASE }}-\
                ${{ env.TOXDIR }}-${{ steps.python.outputs.python-version }}-\
                ${{ hashFiles('./pyproject.toml', './poetry.lock') }}"
        env:
          PYTHONUSERBASE: ${{ github.workspace }}${{ matrix.PYTHONUSERBASE_SUF }}
          TOXDIR: ${{ github.workspace }}${{ matrix.TOXDIR_SUF }}

      # In case the dependencies weren't restored, install them
      - name: Install dependencies using poetry
        if: steps.python_cache.outputs.cache-hit != 'true'
        run: |
          pip install poetry
          pip install tox
          pip install tox-poetry
          pip install tox-gh-actions
        env:
          PYTHONUSERBASE: ${{ github.workspace }}${{ matrix.PYTHONUSERBASE_SUF }}

      - name: Test with tox
        run: python -m tox
        env:
          PIP_USER: 0  # We want tox to use it's environments, not user installs
          PYTHONUSERBASE: ${{ github.workspace }}${{ matrix.PYTHONUSERBASE_SUF }}
          POETRY_CACHE_DIR: ${{ github.workspace }}${{ matrix.POETRY_CACHE_DIR_SUF }}
